{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","res","results","map","getCharacters","getAllComics","getComic","View","_ref","comic","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/5.dd3a43ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=40df3bf2bfafdec087783b66f4bd977a';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacters = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? \r\n                `${char.description.slice(0, 210)}...` \r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        };\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {\r\n        loading, \r\n        error, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacters,\r\n        getAllComics,\r\n\t\tgetComic\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n        \r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { Link, useParams } from 'react-router-dom';\r\nimport {useState, useEffect} from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId]);\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n    \r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n    \r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}